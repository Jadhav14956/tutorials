Open Source Adventure

=================================================================
Inspiration ‚ú® 

After reading Shubheksha's article "Hey newbie open source contributors: please blog more." (https://medium.freecodecamp.com/new-contributors-to-open-source-please-blog-more-920af14cffd#.rwxevlacv), I decided to throw my hat into the ring. The idea of Open Source Projects always resonated with me; people volunteering their time and knowledge for the common good.

I've been told that working on Open Source Projects is one of the best ways to learn. You get to see code that other, more skilled and experienced, people wrote. You get to work with technology that you would not have otherwise used yourself on your hobby projects.

I also think that working in Open Source implies some altruistic characteristics of yourself; I imagine a Robin Hood figure armed with a MacBook (which you can barely distinguish under its 20 stickers) courageously battling closed-source Legacy code. I want to be a Robin Hood.

=================================================================
Fears ‚ò†

I had a number of fears before starting my adventure into Open Source.
My main fear was the size and complexity of the project I would work on. Staring at a repository with 2,000 commits can be daunting, especially when my hobby projects top out at 40 commits. As you start navigating through the forest of files with cryptic names that you've never heard of (.snyk, .varci.yml, pm2Start.js), thoughts of Imposter Syndrome start creeping in. "Am I actually qualified to touch this code?"

I've heard some stories about harsh communities. I will come to a point where I need some guidance and...talk to an actual person! Dread suffocates me as I think about having my first conversation with an Open Source Maintainer. In my head, their responses to me range from "lol are you serious?" to "maybe web development isn't for you." I take comfort in the fact that, like an internet troll, I can hide myself (and my shame) behind my computer.

I also fear that my Pull Request won't get merged. It's possible that my work is so poor that other maintainers won't bother to steer me in the right direction. Is it worth devoting hours, or even days, of my time on code that might not even get used?

Despite these fears, I decide to embark on my Open Source Adventure.

=================================================================
Finding a project üîé

The first step is finding an Open Source Project to work on. Shubheksha article "How to find your first open source bug to fix" (https://medium.freecodecamp.com/finding-your-first-open-source-project-or-bug-to-work-on-1712f651e5ba#.q0bt5j41d) recommended looking at "Up For Grabs" (http://up-for-grabs.net/) for project candidates. After quickly scanning through the list of JavaScript projects, I don't find any that catch my eye.

I wanted to find a project that I personally use and believe in. The problem with that is most of those are so mature that it's too advanced for me to follow along. I love React, but I don't have any idea how to fix "unexpected interleaving of subtree/parent lifecycle methods."
And the new projects where I could make a significant dent are unknown to me because I haven't heard of them yet.

Then I remember that Free Code Camp is open source. It passes my test as a project I use and believe in; I've gone through hours of their curriculum and love how they help new developers and non-profits at the same time. I also recommend Free Code Camp to anyone who thinks of doing web development.

After scanning through their list of Open Issues on Github, I chose Free Code Camp as my first Open Source Project.

=================================================================
Finding a bug üêú

The next step is finding an issue to work on. Theoretically, this should be the easiest and quickest thing to do. That's also what I think watching a movie on Netflix is like; but sometimes I spend more time picking something to watch than actually watching it.

With over 300 open issues, I decide to filter them by labels. I find one called "first-timers-only" which sounds friendly enough. This yields one issue with over 80 comments. It doesn't look like something I can jump right into and start working on so I continue my search.

I find another label called "help wanted", and I scan for issues with 0 comments. I notice that a number of these "open" issues have actually been resolved by Pull Requests, but the issues themselves haven't been closed. I wonder how many of these 300 issues are actually outstanding.

After 15 minutes of browsing through issues, I decide to use a different tactic; I'll sit and wait for new issues to be opened and claim any that I can handle. After waiting 15 minutes, I see that most of the new issues are from students that are stuck on challenges. These issues aren't actual bugs that I can fix.

And then, issue #10989 (https://github.com/FreeCodeCamp/FreeCodeCamp/issues/10989) came into my life. It was an issue related to a rigid regex test for one of the challenges.

I'm thinking to myself, "I know a little about regex."

Then a maintainer comments that this is a valid issue and adds a "help wanted" label to it. My heart is pounding as I reread the issue 3 more times to make sure I didn't miss anything.

I'm thinking to myself, "I can do this!"

I comment on the issue and shyly ask if I can work on it. My knees are weak and arms are heavy. My palms are sweating as I wait for a response. I feel as nervous as if I just texted a girl asking them on a date.

And finally...someone responds back "you can work on that."

Now it's time to work.

=================================================================
Getting started üö∂üö∂üèÉ

I start by looking through the README.md in the repository. Thankfully, Free Code Camp has very detailed instructions on how to contribute and create pull requests. They have a Gitter channel just for contributors. I fork the repository and get started.

=================================================================
Stumbling üö∑

I know that getting my environment set up will be tough. My mentor told me that it took him a week to get all the right programs installed before he could start contributing at his first job. It's difficult because you have to read these cryptic error messages in your terminal when something doesn't install or run correctly. It wasn't long until I ran into an issue.

When I ran "gulp" to get started, there was an error inside of the gulpfile. It was highlighting a line of code using ES6 arrow syntax and saying it didn't recognize it. I look through the rest of the file and see no other use of ES6 arrow syntax. Could I have forgotten a step in the build process?

I google around for a solution and get nothing helpful. I decide to hack it and turn the ES6 arrow into a regular function declaration and see what happens. The "gulp" command doesn't complain anymore and sets up a localhost.

High off of this success, it doesn't take long before I run into another road block. I go to my localhost and I'm greeted by the Free Code Camp home page, except it's not functional. Clicking on the "map" link that normally displays all challenges does nothing. There are a number of errors in the console, most noticeably a missing "bundle.js" file.

I kick myself for missing a step somewhere, and decide to start from scratch. I delete my local copy of the repo and reinstall everything, making sure to be extra vigilant with each keystroke. I'm met with the same errors and decide it's time to use the Gitter channel.

When I first log into the Gitter channel, I see a lot of messages talking about new updates to Free Code Camp. To my right, I'm greeted by a summary of recent activity on this channel which included 4 people getting banned. Were these 4 people guilty of not getting their gulp files to work? Did they nonchalantly ask where their missing bundle.js file was?

I decide to read through the contribution guide again in case I missed something obvious. I've read through it so many times that I can practically recite it. I don't find anything new that would help me and I get the strength to finally ask the Gitter channel about my ES6 syntax issue.

Someone responds right away, but I am quickly disappointed when I notice they aren't talking to me.

I wait and wait until salvation comes! A maintainer named Dylan says that I have to update my node and npm. I look through the contribution guide and it clearly states the version I should be using; how did I overlook this?! I thank Dylan for his act of kindness and I quietly thank Gitter for not banning me. I promptly install the latest node and npm and things are looking brighter already.

I decide to delete everything and start from scratch again. It's my third time now and setting this project up has become a familiar dance. I also pull some new code that has been committed since yesterday which fixes some of the errors I was seeing. I run into the same error with the missing "bundle.js" file and I ask in the Gitter channel about this. Someone responds that the "gulp" command should have created it. I create the "bundle.js" by running the "webpack" command myself and finally the environment looks like it's working. I can finally start working on the actual issue!

The actual fix took a quarter of the time that setting up my project took. I had to write a regex that checked for a regex. The tricky part was to turn my regex into a string and remember to use backslashes to escape characters as needed. I update one line of code and run my tests which pass.

I read through the documentation for pull request instructions. Free Code Camp has an awesome pre-populated checklist when you submit a pull request.

I take a final breath and send off my pull request. I feel like a parent sending their child off to school. There's nothing else I can do now except wait.

=================================================================
Pull Request Merged! üèã

The next day, I get an email about the status of my pull request. (https://github.com/FreeCodeCamp/FreeCodeCamp/pull/11026#event-810810708) Someone commented "LGTM"! After a quick google search to find out what that means, I feel a big sense of relief and joy as I see that my code is merged.

My first step into Open Source was a success!

=================================================================
What I learned ü§ì

I did learn some technical things by working on this issue. I got more experience working with regex.

I also learned about using backslashes to escape certain characters in strings. I've only used backslashes to escape quotation marks inside of strings before this.

The other benefits I got was getting more comfortable with GitHub. It's been awhile since I made a pull request.

=================================================================
Words to new Open Source contributors üë∂

This was an amazing experience for me and I recommend others to give it a shot. For those interested in contributing, here's some advice that I would give you.

Work hard and persevere. I would say 60% of the time when you're working, everything is running with no issues. But it's that other 40% when everything breaks that will define who you are as a developer. Embrace these obstacles and fight through them. I learn more from fixing my bugs than if everything was running smoothly. Change your mindset to welcome mistaktes and view them as lessons.

Be detailed when you're communicating. This is especially important when you're asking questions over an asynchronous mode of communication (like Gitter or email).

Imagine using an API to request information about the weather in your city. Which option makes more sense?
1. You ask the API for the weather
2. The API responds back asking for a location
3. You respond "New York"
4. The API asks if you want it in celsius, fahrenheit or kelvin
5. You respond "fahrenheit"
6. The API responds back with "72 degrees fahrenheit in New York"

Or does this make more sense:
1. You ask the API for the weather in New York in fahrenheit.
2. The API responds back with "72 degrees fahrenheit in New York"

It seems silly that anyone would choose the first option when working with an API, but that's exactly what people do when they're communicating. Simple conversations get drawn out while each party is waiting minutes or hours for the other to respond.

Don't be intimidated by Open Source maintainers and developers more skilled than you are. They may have more experience than you, but realize that they were like you at one point. They've just experienced and survived more failures than you have.
Just remember that all developers are on the same long road; we just might be a couple of steps behind. The important thing is to keep moving.

=================================================================
Words to Open Source maintainers üë§

The Free Code Camp community was amazing and super helpful when I needed it. I want to thank all the maintainers who go out of their way to help out new contributors. You might think you're doing something small when you're telling someone to update their node and npm. But you don't realize that you might actually be their lifesaver keeping them from drowning and quitting. Keep up the awesome work!

Also, be careful with the words you choose to use. I was on a trip to Japan and was looking for a restaurant to dine. I passed by a promising restaurant, but it had a sign on the window that said "No English Speaking." Everything else was in Japanese.

How would a foreigner like me have interpreted this sign? Does it mean that nobody in there speaks English? Does it mean that I'd have to play russian roulette with whatever I pointed to on the menu? Does it mean they're xenophobic and not welcoming of foreigners like me? I never took the chance to find out and kept on walking.

As maintainers, sometimes you're the first real person that new contributors communicate with. Be mindful that these contributors are in the foreign land of Open Source and may be struggling to speak the language, let alone try to fix an open issue in the repository.

I plan on continuing my Open Source journey and hope to see you around and hear your stories.
